extension StringProtocol where Self: RangeReplaceableCollection {
	subscript(_ index: Int) -> Character {
		get {
			let index = self.index(self.startIndex, offsetBy: index)
			return self[index]
		}
		set {
			let index = self.index(self.startIndex, offsetBy: index)
			replaceSubrange(index..<self.index(after: index), with: String(newValue))
		}
	}
	
	subscript(_ range: Range<Int>) -> Self.SubSequence {
		get {
			let start = self.index(self.startIndex, offsetBy: range.lowerBound)
			let end = self.index(self.startIndex, offsetBy: range.upperBound)
			return self[start ..< end]
		}
		set {
			let start = self.index(self.startIndex, offsetBy: range.lowerBound)
			let end = self.index(self.startIndex, offsetBy: range.upperBound)
			replaceSubrange(start ..< end, with: newValue)
		}
	}
	
	subscript(_ range: ClosedRange<Int>) -> Self.SubSequence {
		get {
			let start = self.index(self.startIndex, offsetBy: range.lowerBound)
			let end = self.index(self.startIndex, offsetBy: range.upperBound)
			return self[start ... end]
		}
		set {
			let start = self.index(self.startIndex, offsetBy: range.lowerBound)
			let end = self.index(self.startIndex, offsetBy: range.upperBound)
			replaceSubrange(start ... end, with: newValue)
		}
	}
}

extension String {
	public static func +(lhs: String, rhs: Character) -> String {
		return lhs + String(rhs)
	}
	public static func +=(lhs: inout String, rhs: Character) {
		lhs += String(rhs)
	}
}

extension Substring {
	public static func +(lhs: Substring, rhs: Character) -> Substring {
		return lhs + String(rhs)
	}
	public static func +=(lhs: inout Substring, rhs: Character) {
		lhs += String(rhs)
	}
}

