//
//  ProjectEulerProblems.swift
//  Swift Coder
//
//  Created by Josh Birnholz on 11/20/18.
//  Copyright © 2018 Josh Birnholz. All rights reserved.
//

import Foundation

let eulerProblems: [Problem] = [
	Problem(title: "Multiples of 3 and 5",
			functionName: "euler1",
			returnType: Int.self,
			parameters: [Problem.Parameter](),
			prompt: "If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6, and 9. The sum of these multiples is 23.\n\nFind the sum of all the multiples of 3 or 5 below 1000.",
			solution: nil,
			testCases: [Problem.TestCase(expectation: 233168)],
			eulerMode: true),
	Problem(title: "Even Fibonacci numbers",
			functionName: "euler2",
			returnType: Int.self,
			parameters: [Problem.Parameter](),
			prompt: "Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\n\n1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n\nBy considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.",
			solution: nil,
			testCases: [Problem.TestCase(expectation: 4613732)],
			eulerMode: true),
	Problem(title: "Largest prime factor",
			functionName: "euler3",
			returnType: Int.self,
			parameters: [Problem.Parameter](),
			prompt: "The prime factors of 13195 are 5, 7, 13 and 29.\n\nWhat is the largest prime factor of the number 600851475143?",
			solution: nil,
			testCases: [Problem.TestCase(expectation: 6857)],
			eulerMode: true),
	Problem(title: "Largest palindrome product",
			functionName: "euler4",
			returnType: Int.self,
			parameters: [Problem.Parameter](),
			prompt: "A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.\n\nFind the largest palindrome made from the product of two 3-digit numbers.",
			solution: nil,
			testCases: [Problem.TestCase(expectation: 906609)],
			eulerMode: true),
	Problem(title: "Smallest multiple",
			functionName: "euler5",
			returnType: Int.self,
			parameters: [Problem.Parameter](),
			prompt: "2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.\n\nWhat is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?",
			solution: nil,
			testCases: [Problem.TestCase(expectation: 232792560)],
			eulerMode: true),
	Problem(title: "Sum square difference",
			functionName: "euler6",
			returnType: Int.self,
			parameters: [Problem.Parameter](),
			prompt: "The sum of the squares of the first ten natural numbers is: 1²+ 2² + ... + 10² = 385\n\nThe square of the sum of the first ten natural numbers is: (1 + 2 + ... + 10)² = 55² = 3025\n\nHence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.\n\nFind the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.",
			solution: nil,
			testCases: [Problem.TestCase(expectation: 25164150)], eulerMode: true),
	Problem(title: "10001st prime",
			functionName: "euler7",
			returnType: Int.self,
			parameters: [Problem.Parameter](),
			prompt: "By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.\n\nWhat is the 10 001st prime number?",
			solution: nil,
			testCases: [Problem.TestCase(expectation: 104743)], eulerMode: true),
	Problem(title: "Largest product in a series",
			functionName: "euler8", returnType: Int.self,
			parameters: [Problem.Parameter](),
			prompt: """
The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.



Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
""",
			solution: nil,
			testCases: [Problem.TestCase(expectation: 23514624000)], eulerMode: true),
	Problem(title: "Summation of primes",
			functionName: "euler10",
			returnType: Int.self,
			parameters: [Problem.Parameter](),
			prompt: """
			The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

			Find the sum of all the primes below two million.
			""",
			solution: nil,
			testCases: [Problem.TestCase(expectation: 142913828922)],
			eulerMode: true),
	Problem(title: "Self powers",
			functionName: "euler48",
			returnType: Int.self,
			parameters: [],
			prompt: "The series, 1¹ + 2² + 3³ + ... + 10¹⁰ = 10405071317.\n\nFind the last ten digits of the series, 1¹ + 2² + 3³ + ... + 1000¹⁰⁰⁰.",
			solution: nil,
			hint: nil,
			testCases: [Problem.TestCase(expectation: 9110846700)],
			eulerMode: true),
	Problem(title: "Power digit sum",
			functionName: "euler16",
			returnType: Int.self,
			parameters: [Problem.Parameter](),
			prompt: """
			2¹⁵ = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.
			
			What is the sum of the digits of the number 2¹⁰⁰⁰?
			""",
			solution: nil,
			testCases: [Problem.TestCase(expectation: 31875000)],
			eulerMode: true),
	Problem(title: "Factorial trailing digits",
			functionName: "euler160",
			returnType: Int.self,
			parameters: [],
			prompt: """
			For any N, let f(N) be the last five digits before the trailing zeroes in N!.
			For example,
			
				9! = 362880 so f(9)=36288
				10! = 3628800 so f(10)=36288
				20! = 2432902008176640000 so f(20)=17664
			
			Find f(1,000,000,000,000)
			""",
			solution: nil,
			hint: nil,
			testCases: [Problem.TestCase(expectation: 16576)],
			eulerMode: true)
]
