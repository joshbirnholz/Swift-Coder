//
//  Free Coding.swift
//  Swift Coder
//
//  Created by Josh Birnholz on 5/1/19.
//  Copyright Â© 2019 Josh Birnholz. All rights reserved.
//

import Foundation

let unwrapFreeCodingProblems: [Problem] = [
	Problem(title: "Same Without Case",
			functionName: "sameWithoutCase",
			returnType: Bool.self,
			parameters: [Problem.Parameter(name: "a", type: String.self),
						 Problem.Parameter(name: "b", type: String.self)],
			prompt: "Write a function that accepts two strings and returns true if they are both the same regardless of what letter case they use.",
			hint: "If you make both strings lowercased using `lowercased()` you can compare the lowercased versions.",
			testCases: [Problem.TestCase(expectation: true, arguments: "Swift", "Swift"),
						Problem.TestCase(expectation: true, arguments: "swift", "swift"),
						Problem.TestCase(expectation: true, arguments: "Swift", "swift"),
						Problem.TestCase(expectation: true, arguments: "swift", "swift"),
						Problem.TestCase(expectation: false, arguments: "Taylor", "Swift"),
						Problem.TestCase(expectation: true, arguments: "Taylor", "TAYLOR")]
	),
	Problem(title: "Join Strings",
			functionName: "joinStrings",
			returnType: String.self,
			parameters: [Problem.Parameter(name: "a", type: String.self),
						 Problem.Parameter(name: "b", type: String.self)],
			prompt: "Write a function that accepts two strings and returns them joined together.",
			hint: "You can use + to join two strings together.",
			testCases: [Problem.TestCase(expectation: "carpet", arguments: "car", "pet"),
						Problem.TestCase(expectation: "firefly", arguments: "fire", "fly"),
						Problem.TestCase(expectation: "doghouse", arguments: "dog", "house"),
						Problem.TestCase(expectation: "scitech", arguments: "sci", "tech")]),
	Problem(title: "Letter Count",
			functionName: "letterCount",
			returnType: Int.self,
			parameters: [Problem.Parameter(name: "str", type: String.self)],
			prompt: "Write a function that accepts a string and sends back an integer of how many characters are in the string.",
			hint: "You can use the `count` property to measure the length of the string.",
			testCases: [Problem.TestCase(expectation: 6, arguments: "carpet"),
						Problem.TestCase(expectation: 7, arguments: "firefly"),
						Problem.TestCase(expectation: 8, arguments: "doghouse"),
						Problem.TestCase(expectation: 7, arguments: "scitech"),
						Problem.TestCase(expectation: 5, arguments: "swift")]),
	Problem(title: "Squared",
			functionName: "squared",
			returnType: Int.self,
			parameters: [Problem.Parameter(name: "num", type: Int.self)],
			prompt: "Write a function that accepts an integer and returns that number squared.",
			hint: "The square of a number is that number multiplied by itself.",
			testCases: [Problem.TestCase(expectation: 25, arguments: 5),
						Problem.TestCase(expectation: 1, arguments: 1),
						Problem.TestCase(expectation: 100, arguments: 10),
						Problem.TestCase(expectation: 1600, arguments: 40),
						Problem.TestCase(expectation: 358801, arguments: 599)]),
	Problem(title: "Count Five",
			functionName: "countFive",
			returnType: Int.self,
			parameters: [Problem.Parameter(name: "nums", type: [Int].self)],
			prompt: "Write a function that goes over an array, counting the number of times it contains the number 5, then returns that total.",
			hint: "You can solve this using a for loop.",
			testCases: [Problem.TestCase(expectation: 3, arguments: [1, 5, 2, 5, 3, 5]),
						Problem.TestCase(expectation: 2, arguments: [5, 3, 8, 5, 10]),
						Problem.TestCase(expectation: 1, arguments: [3, 6, 8, 10, 3, 6, 5, 2]),
						Problem.TestCase(expectation: 0, arguments: [Int]()),
						Problem.TestCase(expectation: 3, arguments: [1, 5, 2, 5, 3, 5]),
						Problem.TestCase(isHidden: true, expectation: 1, arguments: [6, 9, 9, 10, 6, 7, 5, 8, 0, 10, 10, 9, 2, 9, 0]),
						Problem.TestCase(isHidden: true, expectation: 2, arguments: [10, 0, 2, 5, 7, 7, 0, 7, 4, 6, 5, 6, 3, 0]),
						Problem.TestCase(isHidden: true, expectation: 6, arguments: [5, 5, 5, 5, 10, 20, 5, 5])]),
	Problem(title: "Double Array",
			functionName: "doubleArray",
			returnType: [Int].self,
			parameters: [Problem.Parameter(name: "nums", type: [Int].self)],
			prompt: "Write a function that doubles all the numbers in an array.",
			hint: "You can solve this using a for loop.",
			testCases: [Problem.TestCase(expectation: [2, 10, 4, 10, 6, 10], arguments: [1, 5, 2, 5, 3, 5]),
						Problem.TestCase(expectation: [2, 6, 10, 14, 18], arguments: [1, 3, 5, 7, 9]),
						Problem.TestCase(expectation: [10, 6, 16, 10, 20], arguments: [5, 3, 8, 5, 10]),
						Problem.TestCase(expectation: [6, 12, 16, 20, 6, 12, 10, 4], arguments: [3, 6, 8, 10, 3, 6, 5, 2]),
						Problem.TestCase(expectation: [Int](), arguments: [Int]()),
						Problem.TestCase(expectation: [2, 10, 4, 10, 6, 10], arguments: [1, 5, 2, 5, 3, 5]),
						Problem.TestCase(isHidden: true, expectation: [12, 18, 18, 20, 12, 14, 10, 16, 0, 20, 20, 18, 4, 18, 0], arguments: [6, 9, 9, 10, 6, 7, 5, 8, 0, 10, 10, 9, 2, 9, 0]),
						Problem.TestCase(isHidden: true, expectation: [20, 0, 4, 10, 14, 14, 0, 14, 8, 12, 10, 12, 6, 0], arguments: [10, 0, 2, 5, 7, 7, 0, 7, 4, 6, 5, 6, 3, 0]),
						Problem.TestCase(isHidden: true, expectation: [10, 10, 10, 10, 20, 40, 10, 10], arguments: [5, 5, 5, 5, 10, 20, 5, 5])]),
	Problem(title: "First Name Terry",
			functionName: "firstNameTerry",
			returnType: [String].self,
			parameters: [Problem.Parameter(name: "names", type: [String].self)],
			prompt: "Write a function that returns an array containing all the people with the first name Terry.",
			hint: "You can solve this using a for loop.",
			testCases: [Problem.TestCase(expectation: ["Terry Jones", "Terry Crews", "Terry Farrell"], arguments: ["Terry Jones", "John Terry", "Terry Crews", "Terry Farrell", "Samuel Terry"])]),
	Problem(title: "Capitalize Words",
			functionName: "capitalizeWords",
			returnType: [String].self,
			parameters: [Problem.Parameter(name: "words", type: [String].self)],
			prompt: "Write code that creates an array of all the items in words, capitalized.",
			hint: "You can solve this using a for loop.",
			testCases: [Problem.TestCase(expectation: ["THE", "RAIN", "IN", "SPAIN"], arguments: ["The", "rain", "in", "Spain"])]),
	Problem(title: "Even Hundred",
			functionName: "evenHundred",
			returnType: [Int].self,
			parameters: [],
			prompt: "Write code that loops from 1 through 100 to create an array of all even numbers.",
			hint: "You'll need to use the division remainder operator, `%`.",
			testCases: [Problem.TestCase(expectation: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98] )])
]
